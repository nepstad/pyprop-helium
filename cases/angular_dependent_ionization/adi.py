import logging
#import copy as objectcopy

import common_import
import pyprop
from helium.eigenvalues.eigenvalues import FindEigenvaluesInverseIterationsPiram
from helium.eigenvalues.eigenvalues import SaveEigenvalueSolverShiftInvert

#set logging level
logging.basicConfig(level=logging.DEBUG)

def FindBoundstates():
    """
    Find some bound states of Helium using Piram + inverse iterations.
    The eigenpairs are also stored in a file (name is autogenerated).

    Returns a list eigenvalues.
    """

    #Load config
    conf = pyprop.Load("config/eigenvalues.ini")
    
    #Setup solver and run eigenvalue iterations for L = 0,1
    eigs = {}
    for L in [0,1]:
        for M in [-L, L]:
            logging.info("Calculating bound states for L = %i, M = %i..." % (L, M))
            angIt = conf.AngularRepresentation.index_iterator
            angIt.L = [L]
            angIt.M = [M]
            conf.SetValue("AngularRepresentation", "index_iterator", angIt)
            #with pyprop.EnableRedirect():
            solver, gmresSolver, E = FindEigenvaluesInverseIterationsPiram(conf)
    
            #Save eigenpairs to HDF-file (name is autogenerated
            SaveEigenvalueSolverShiftInvert(solver, gmresSolver)
            
            eigs['L%i_M%i' % (L, M)] = E

    return solver, gmresSolver, eigs