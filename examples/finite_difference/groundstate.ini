[Names]
output_file_name = "./groundstate.h5"

[RankInfo]
angular_rank = 2
radial_rank1 = 0
radial_rank2 = 1

[Representation]
rank = 3
type = core.CombinedRepresentation_3
representation0 = "FiniteDifferenceRepresentation"
representation1 = "FiniteDifferenceRepresentation"
representation2 = "AngularRepresentation"

[AngularRepresentation]
type = core.CoupledSphericalHarmonicRepresentation
index_iterator = DefaultCoupledIndexIterator(lmax=1, L=[0], M=[0])

[FiniteDifferenceRepresentation]
type = core.CustomGridRepresentation
rank = 1
function = GetGridLinear
xmin = 0.0
xmax = 10.0
#count = %(xmax)s / 0.4 - 1
count = 50
include_left_boundary = False
include_right_boundary = False

[InitialCondition]
type = InitialConditionType.Function
function = lambda config, x: (x[0] + x[1]) * exp(-abs(x[0] + x[1]))

[Propagation]
potential_evaluation = []
grid_potential_list = ["RadialKineticEnergy1", "RadialKineticEnergy2", "AngularKineticEnergy", "CoulombPotential", "ElectronicCouplingPotential"]
propagator = PamPropagator
base_propagator = BasisPropagatorEpetra
timestep = -0.1j
duration = 50
renormalization = True
krylov_basis_size = 5
krylov_tolerance = 0
silent = False

[RadialKineticEnergy1]
classname = "KineticEnergyPotential"
geometry0 = "bandeddistributed-5"
geometry1 = "Diagonal"
geometry2 = "Diagonal"
differentiation0 = 2
differentiation1 = 0
differentiation2 = 0
mass = 1
boundary_scaling0 = array([-3.2114571183919960, 0, 0])
offset0 = -2

[RadialKineticEnergy2]
classname = "KineticEnergyPotential"
geometry0 = "Diagonal"
geometry1 = "bandeddistributed-5"
geometry2 = "Diagonal"
differentiation0 = 0
differentiation1 = 2
differentiation2 = 0
mass = 1
boundary_scaling1 = array([-3.2114571183919960, 0, 0])
offset1 = -2

[AngularKineticEnergy]
base = "RankInfo"
classname = "CoupledSphericalKineticEnergyEvaluator"
geometry0 = "Diagonal"
geometry1 = "Diagonal"
geometry2 = "Diagonal"
mass = 1

[ElectronicCouplingPotential]
base = "RankInfo"
classname = "CustomPotentialEvaluationR12"
geometry0 = "Diagonal"
geometry1 = "Diagonal"
geometry2 = "SelectionRule_R12_100"

[CoulombPotential]
base = "RankInfo"
classname = "CoupledSphericalCoulombPotential"
geometry0 = "Diagonal"
geometry1 = "Diagonal"
geometry2 = "Diagonal"
z = 2

[Distribution]
proc_array_rank = 2
initial_distribution = array([0,1], dtype=int)
