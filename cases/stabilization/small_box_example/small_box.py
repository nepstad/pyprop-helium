import sys
import logging

sys.path.append("..")
import stabilization

import helium.propagation.tasks as Tasks
from helium.eigenvalues.eigenvalues import FindEigenvaluesInverseIterationsPiram
from helium.eigenvalues.eigenvalues import SaveEigenvalueSolverShiftInvert
from helium.propagation.propagate import Propagate
from helium.eigenvalues.eigenstates import LoadBoundstateIndex
from helium.analysis.observables import DoubleContinuumObservables
import pyprop

#set logging level
logging.basicConfig(level=logging.DEBUG)

def FindBoundstates():
	"""
	Find some bound states of Helium using Piram + inverse iterations.
	The eigenpairs are also stored in a file (name is autogenerated).

	Returns a list eigenvalues.
	"""

	#Load a config file
	conf = pyprop.Load("eigenvalues.ini")

	#Setup solver and run eigenvalue iterations for L = 0,1
	eigs = {}
	for L in [0,1]:
		logging.info("Calculating bound states for L = %i..." % L)
		angIt = conf.AngularRepresentation.index_iterator
		angIt.L = [L]
		conf.SetValue("AngularRepresentation", "index_iterator", angIt)
		with pyprop.EnableRedirect():
			solver, gmresSolver, E = FindEigenvaluesInverseIterationsPiram(conf)

		#Save eigenpairs to HDF-file (name is autogenerated
		SaveEigenvalueSolverShiftInvert(solver, gmresSolver)
		
		eigs['L_%i' % L] = E

	return eigs


def SetupTasks():
	"""
	Setup some propagation tasks defined in the Helium module.

	Returns a list of propagation tasks.
	"""
	tasks = []
	tasks += [Tasks.SaveWavefunction(True)]
	tasks += [Tasks.ProgressReport()]
	#tasks += [Tasks.DisplayGMRESError()]
	
	return tasks


def TestPropagationSmallBox():
	"""
	Calculate the effect of a short, intense laser pulse on the Helium
	ground state, by time propagation using the Cayley propagator.

	Uses the 'propagation.ini' config file.

	Returns helium.propagate.Propagate object.
	"""
	#Load config
	conf = pyprop.Load("propagation.ini")
	
	#Setup propagation tasks
	tasks = SetupTasks()

	#Setup propagate object
	prop = Propagate(conf, tasks, 50)
	
	#Run propagation
	prop.run()
	
	return prop


def CalculateIonization(conf):
	"""
	Calculates total-, single- and double ionization probabilities for
	a propagated wavefunction, defined by the Pyprop config object 'conf'.
	
	Returns a 'DoubleContinuumObservables' instance.
	"""

	#Setup/load wavefunction
	logging.info("Load wavefunction...")
	with pyprop.EnableRedirect():
		psiFileName = conf.Names.output_file_name
		psi = pyprop.CreateWavefunctionFromFile(psiFileName)

	#Observables
	logging.info("Calculating observables...")
	#isIonized = lambda E: E > 0.0
	observables = DoubleContinuumObservables(psi, conf)
	observables.Setup()
	logging.info("  Calculation double ionization...")
	
	doubleIon = observables.GetDoubleIonizationProbability()
	totalIon = observables.TotalIonizationProbability
	logging.info("    Total ionization = %s" % totalIon)
	logging.info("    Double ionization = %s" % doubleIon)
	
	return observables

